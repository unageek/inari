name: build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      RUSTDOCFLAGS: -Ctarget-cpu=haswell -Dwarnings
      RUSTFLAGS: -Ctarget-cpu=haswell -Dwarnings

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/gmp-mpfr-sys
          key: ${{ env.GITHUB_JOB }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ env.GITHUB_JOB }}-${{ secrets.CACHE_VERSION }}-

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy, rustfmt
          profile: minimal

      - uses: Swatinem/rust-cache@v1

      - name: Is AVX-512F available?
        id: avx512f
        run: lscpu | grep --quiet avx512f
        continue-on-error: true

      - name: Test
        run: cargo test --release

      - name: Test (targeting AVX-512F)
        run: cargo test --release
        if: ${{ steps.avx512f.outcome == 'success' }}
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Ctarget-feature=+avx512f
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -Ctarget-feature=+avx512f

      - name: Test (--no-default-features)
        run: cargo test --release --no-default-features

      - name: Clippy
        run: cargo clippy --all-targets

      - name: Clippy (targeting AVX-512F)
        run: cargo clippy --all-targets
        if: ${{ steps.avx512f.outcome == 'success' }}
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Ctarget-feature=+avx512f
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -Ctarget-feature=+avx512f

      - name: Check format
        run: cargo fmt -- --check

      - name: Check docs
        run: cargo rustdoc

      - name: Coverage
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Zprofile -Ccodegen-units=1 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -Zprofile -Ccodegen-units=1 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests
        run: |
          cargo clean
          cargo test

      - name: Gather coverage data
        id: coverage
        uses: actions-rs/grcov@v0.1

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}
